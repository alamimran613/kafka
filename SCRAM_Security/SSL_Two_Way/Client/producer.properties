############################# Producer Basics #############################

# list of brokers used for bootstrapping knowledge about the rest of the cluster
# format: host1:port1,host2:port2 ...
bootstrap.servers=ip-172-31-45-22.ap-south-1.compute.internal:9092,ip-172-31-46-247.ap-south-1.compute.internal:9092,ip-172-31-38-217.ap-south-1.compute.internal:9092
#bootstrap.servers=172.31.45.22:9092,172.31.46.247:9092,172.31.38.217:9092
# specify the compression codec for all data generated: none, gzip, snappy, lz4, zstd
compression.type=none

# name of the partitioner class for partitioning records;
# The default uses "sticky" partitioning logic which spreads the load evenly between partitions, but improves throughput by attempting to fill the batches sent to each partition.
#partitioner.class=

# the maximum amount of time the client will wait for the response of a request
#request.timeout.ms=

# how long `KafkaProducer.send` and `KafkaProducer.partitionsFor` will block for
#max.block.ms=

# the producer will wait for up to the given delay to allow other records to be sent so that the sends can be batched together
#linger.ms=

# the maximum size of a request in bytes
#max.request.size=

# the default batch size in bytes when batching multiple records sent to a partition
#batch.size=

# the total bytes of memory the producer can use to buffer records waiting to be sent to the server
#buffer.memory=


security.protocol=SSL
ssl.protocol=TLSv1.2
ssl.truststore.location=/home/ubuntu/ssl/kafka.producer.truststore.jks
ssl.truststore.password=serversecret
ssl.keystore.location=/home/ubuntu/ssl/kafka.producer.keystore.jks
ssl.keystore.password=serversecret
ssl.key.password=serversecret
